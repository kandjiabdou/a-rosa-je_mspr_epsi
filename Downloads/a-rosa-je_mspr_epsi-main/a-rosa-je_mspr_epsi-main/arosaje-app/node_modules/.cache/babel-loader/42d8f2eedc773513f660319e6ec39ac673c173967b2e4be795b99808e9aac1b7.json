{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VBtnToggle.css\";\n\n// Components\nimport { VBtnGroup } from \"../VBtnGroup/index.mjs\"; // Composables\nimport { makeGroupProps, useGroup } from \"../../composables/group.mjs\"; // Utility\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\nexport const VBtnToggleSymbol = Symbol.for('vuetify:v-btn-toggle');\nexport const VBtnToggle = genericComponent()({\n  name: 'VBtnToggle',\n  props: makeGroupProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      isSelected,\n      next,\n      prev,\n      select,\n      selected\n    } = useGroup(props, VBtnToggleSymbol);\n    useRender(() => {\n      var _slots$default;\n      return _createVNode(VBtnGroup, {\n        \"class\": \"v-btn-toggle\"\n      }, {\n        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, {\n          isSelected,\n          next,\n          prev,\n          select,\n          selected\n        })]\n      });\n    });\n    return {\n      next,\n      prev,\n      select\n    };\n  }\n});","map":{"version":3,"mappings":";AAAA;AACA;;AAEA;AAAA,SACSA,SAAS,kCAElB;AAAA,SACSC,cAAc,EAAEC,QAAQ,uCAEjC;AAAA,SACSC,gBAAgB,EAAEC,SAAS,gCAEpC;AAQA,OAAO,MAAMC,gBAA4C,GAAGC,MAAM,CAACC,GAAG,CAAC,sBAAsB,CAAC;AAE9F,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,EAItC,CAAC;EACHM,IAAI,EAAE,YAAY;EAElBC,KAAK,EAAET,cAAc,EAAE;EAEvBU,KAAK,EAAE;IACL,mBAAmB,EAAGC,KAAU,IAAK;EACvC,CAAC;EAEDC,KAAK,CAAEH,KAAK,QAAa;IAAA,IAAX;MAAEI;IAAM,CAAC;IACrB,MAAM;MAAEC,UAAU;MAAEC,IAAI;MAAEC,IAAI;MAAEC,MAAM;MAAEC;IAAS,CAAC,GAAGjB,QAAQ,CAACQ,KAAK,EAAEL,gBAAgB,CAAC;IAEtFD,SAAS,CAAC;MAAA;MAAA;QAAA,SACS;MAAc;QAAAgB,kCAC3BN,KAAK,CAACM,OAAO,qBAAbC,yBAAK,EAAW;UAChBN,UAAU;UACVC,IAAI;UACJC,IAAI;UACJC,MAAM;UACNC;QACF,CAAC,CAAyB;MAAA;IAAA,CAE7B,CAAC;IAEF,OAAO;MACLH,IAAI;MACJC,IAAI;MACJC;IACF,CAAC;EACH;AACF,CAAC,CAAC","names":["VBtnGroup","makeGroupProps","useGroup","genericComponent","useRender","VBtnToggleSymbol","Symbol","for","VBtnToggle","name","props","emits","value","setup","slots","isSelected","next","prev","select","selected","default","_slots$default"],"sources":["../../../src/components/VBtnToggle/VBtnToggle.tsx"],"sourcesContent":["// Styles\nimport './VBtnToggle.sass'\n\n// Components\nimport { VBtnGroup } from '@/components/VBtnGroup'\n\n// Composables\nimport { makeGroupProps, useGroup } from '@/composables/group'\n\n// Utility\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey } from 'vue'\nimport type { SlotsToProps } from '@/util'\nimport type { GroupProvide } from '@/composables/group'\n\nexport type BtnToggleSlotProps = 'isSelected' | 'select' | 'selected' | 'next' | 'prev'\nexport interface DefaultBtnToggleSlot extends Pick<GroupProvide, BtnToggleSlotProps> {}\n\nexport const VBtnToggleSymbol: InjectionKey<GroupProvide> = Symbol.for('vuetify:v-btn-toggle')\n\nexport const VBtnToggle = genericComponent<new <T>() => {\n  $props: SlotsToProps<{\n    default: [DefaultBtnToggleSlot]\n  }>\n}>()({\n  name: 'VBtnToggle',\n\n  props: makeGroupProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { isSelected, next, prev, select, selected } = useGroup(props, VBtnToggleSymbol)\n\n    useRender(() => (\n      <VBtnGroup class=\"v-btn-toggle\">\n        { slots.default?.({\n          isSelected,\n          next,\n          prev,\n          select,\n          selected,\n        } as DefaultBtnToggleSlot) }\n      </VBtnGroup>\n    ))\n\n    return {\n      next,\n      prev,\n      select,\n    }\n  },\n})\n\nexport type VBtnToggle = InstanceType<typeof VBtnToggle>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}