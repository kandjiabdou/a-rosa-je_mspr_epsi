{"ast":null,"code":"import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Components\nimport { VDivider } from \"../VDivider/index.mjs\";\nimport { filterListGroupProps, VListGroup } from \"./VListGroup.mjs\";\nimport { VListItem } from \"./VListItem.mjs\";\nimport { VListSubheader } from \"./VListSubheader.mjs\"; // Utilities\nimport { createList } from \"./list.mjs\";\nimport { genericComponent } from \"../../util/index.mjs\"; // Types\nexport const VListChildren = genericComponent()({\n  name: 'VListChildren',\n  props: {\n    items: Array\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    createList();\n    return () => {\n      var _slots$default, _props$items;\n      return ((_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)) ?? ((_props$items = props.items) == null ? void 0 : _props$items.map(_ref2 => {\n        let {\n          children,\n          props: itemProps,\n          type,\n          raw: item\n        } = _ref2;\n        if (type === 'divider') {\n          var _slots$divider;\n          return ((_slots$divider = slots.divider) == null ? void 0 : _slots$divider.call(slots, {\n            props: itemProps\n          })) ?? _createVNode(VDivider, itemProps, null);\n        }\n        if (type === 'subheader') {\n          var _slots$subheader;\n          return ((_slots$subheader = slots.subheader) == null ? void 0 : _slots$subheader.call(slots, {\n            props: itemProps\n          })) ?? _createVNode(VListSubheader, itemProps, {\n            default: slots.subheader\n          });\n        }\n        const slotsWithItem = {\n          subtitle: slots.subtitle ? slotProps => {\n            var _slots$subtitle;\n            return (_slots$subtitle = slots.subtitle) == null ? void 0 : _slots$subtitle.call(slots, {\n              ...slotProps,\n              item\n            });\n          } : undefined,\n          prepend: slots.prepend ? slotProps => {\n            var _slots$prepend;\n            return (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, {\n              ...slotProps,\n              item\n            });\n          } : undefined,\n          append: slots.append ? slotProps => {\n            var _slots$append;\n            return (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, {\n              ...slotProps,\n              item\n            });\n          } : undefined,\n          default: slots.default ? slotProps => {\n            var _slots$default2;\n            return (_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots, {\n              ...slotProps,\n              item\n            });\n          } : undefined,\n          title: slots.title ? slotProps => {\n            var _slots$title;\n            return (_slots$title = slots.title) == null ? void 0 : _slots$title.call(slots, {\n              ...slotProps,\n              item\n            });\n          } : undefined\n        };\n        const [listGroupProps, _1] = filterListGroupProps(itemProps);\n        return children ? _createVNode(VListGroup, _mergeProps({\n          \"value\": itemProps == null ? void 0 : itemProps.value\n        }, listGroupProps), {\n          activator: _ref3 => {\n            let {\n              props: activatorProps\n            } = _ref3;\n            return slots.header ? slots.header({\n              ...itemProps,\n              ...activatorProps\n            }) : _createVNode(VListItem, _mergeProps(itemProps, activatorProps), slotsWithItem);\n          },\n          default: () => _createVNode(VListChildren, {\n            \"items\": children\n          }, slots)\n        }) : slots.item ? slots.item(itemProps) : _createVNode(VListItem, itemProps, slotsWithItem);\n      }));\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["VDivider","filterListGroupProps","VListGroup","VListItem","VListSubheader","createList","genericComponent","VListChildren","name","props","items","Array","setup","slots","default","_slots$default","_props$items","map","_ref2","children","itemProps","type","raw","item","divider","_slots$divider","subheader","_slots$subheader","slotsWithItem","subtitle","slotProps","_slots$subtitle","undefined","prepend","_slots$prepend","append","_slots$append","_slots$default2","title","_slots$title","listGroupProps","_1","value","activator","_ref3","activatorProps","header"],"sources":["../../../src/components/VList/VListChildren.tsx"],"sourcesContent":["// Components\nimport { VDivider } from '../VDivider'\nimport { filterListGroupProps, VListGroup } from './VListGroup'\nimport { VListItem } from './VListItem'\nimport { VListSubheader } from './VListSubheader'\n\n// Utilities\nimport { createList } from './list'\nimport { genericComponent } from '@/util'\n\n// Types\nimport type { InternalListItem } from './VList'\nimport type { ListGroupActivatorSlot } from './VListGroup'\nimport type { ListItemSubtitleSlot, ListItemTitleSlot } from './VListItem'\nimport type { SlotsToProps } from '@/util'\nimport type { Prop } from 'vue'\n\nexport const VListChildren = genericComponent<new <T extends InternalListItem>() => {\n  $props: {\n    items?: T[]\n  } & SlotsToProps<{\n    default: []\n    header: [ListGroupActivatorSlot]\n    item: [T]\n    title: [ListItemTitleSlot]\n    subtitle: [ListItemSubtitleSlot]\n  }>\n}>()({\n  name: 'VListChildren',\n\n  props: {\n    items: Array as Prop<InternalListItem[]>,\n  },\n\n  setup (props, { slots }) {\n    createList()\n\n    return () => slots.default?.() ?? props.items?.map(({ children, props: itemProps, type, raw: item }) => {\n      if (type === 'divider') {\n        return slots.divider?.({ props: itemProps }) ?? (\n          <VDivider { ...itemProps } />\n        )\n      }\n\n      if (type === 'subheader') {\n        return slots.subheader?.({ props: itemProps }) ?? (\n          <VListSubheader\n            { ...itemProps }\n            v-slots={{ default: slots.subheader }}\n          />\n        )\n      }\n\n      const slotsWithItem = {\n        subtitle: slots.subtitle ? (slotProps: any) => slots.subtitle?.({ ...slotProps, item }) : undefined,\n        prepend: slots.prepend ? (slotProps: any) => slots.prepend?.({ ...slotProps, item }) : undefined,\n        append: slots.append ? (slotProps: any) => slots.append?.({ ...slotProps, item }) : undefined,\n        default: slots.default ? (slotProps: any) => slots.default?.({ ...slotProps, item }) : undefined,\n        title: slots.title ? (slotProps: any) => slots.title?.({ ...slotProps, item }) : undefined,\n      }\n\n      const [listGroupProps, _1] = filterListGroupProps(itemProps as any)\n\n      return children ? (\n        <VListGroup\n          value={ itemProps?.value }\n          { ...listGroupProps }\n        >\n          {{\n            activator: ({ props: activatorProps }) => slots.header\n              ? slots.header({ ...itemProps, ...activatorProps })\n              : <VListItem { ...itemProps } { ...activatorProps } v-slots={ slotsWithItem } />,\n            default: () => (\n              <VListChildren items={ children } v-slots={ slots } />\n            ),\n          }}\n        </VListGroup>\n      ) : (\n        slots.item ? slots.item(itemProps) : (\n          <VListItem\n            { ...itemProps }\n            v-slots={ slotsWithItem }\n          />\n        )\n      )\n    })\n  },\n})\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}