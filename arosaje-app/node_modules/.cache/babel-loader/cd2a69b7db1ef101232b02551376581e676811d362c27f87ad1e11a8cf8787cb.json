{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, withModifiers as _withModifiers, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h3\", {\n  class: \"titre\"\n}, \"Double Authentification\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"span\", null, \"Veillez scanner le code QR avec l'application Google Authenticator\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_text_field = _resolveComponent(\"v-text-field\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_form = _resolveComponent(\"v-form\");\n  const _component_v_sheet = _resolveComponent(\"v-sheet\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_card, {\n      class: \"mx-auto\",\n      \"max-width\": \"500\"\n    }, {\n      default: _withCtx(() => [_hoisted_1, _hoisted_2, _createElementVNode(\"img\", {\n        src: $data.qrCodeDataURI,\n        alt: \"QR code\"\n      }, null, 8 /* PROPS */, _hoisted_3), _createVNode(_component_v_sheet, {\n        width: \"300\",\n        class: \"mx-auto formnum\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_form, {\n          onSubmit: _cache[1] || (_cache[1] = _withModifiers(() => {}, [\"prevent\"]))\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_text_field, {\n            modelValue: _ctx.firstName,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.firstName = $event),\n            rules: _ctx.rules,\n            label: \"Code secret\"\n          }, null, 8 /* PROPS */, [\"modelValue\", \"rules\"]), _createVNode(_component_v_btn, {\n            type: \"submit\",\n            onclick: \"window.location.href = '/profil';\",\n            block: \"\",\n            class: \"mt-2\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Submit\")]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createElementVNode","class","_createBlock","_component_v_container","_createVNode","_component_v_card","_hoisted_1","_hoisted_2","src","$data","qrCodeDataURI","alt","_component_v_sheet","width","_component_v_form","onSubmit","_cache","_withModifiers","_component_v_text_field","_ctx","firstName","$event","rules","label","_component_v_btn","type","onclick","block"],"sources":["C:\\Users\\toumy\\Desktop\\projet_mspr\\a-rosa-je_mspr_epsi\\arosaje-app\\src\\views\\doubleAuth.vue"],"sourcesContent":["<template>\r\n  <v-container>\r\n    <v-card\r\n        class=\"mx-auto\"\r\n        max-width=\"500\"\r\n\r\n    >\r\n      <h3 class=\"titre\">Double Authentification</h3>\r\n      <span>Veillez scanner le code QR avec l'application Google Authenticator</span>\r\n      <img :src=\"qrCodeDataURI\" alt=\"QR code\">\r\n      <v-sheet width=\"300\" class=\"mx-auto formnum\">\r\n        <v-form @submit.prevent>\r\n          <v-text-field\r\n              v-model=\"firstName\"\r\n              :rules=\"rules\"\r\n              label=\"Code secret\"\r\n          ></v-text-field>\r\n          <v-btn type=\"submit\" onclick=\"window.location.href = '/profil';\" block class=\"mt-2\">Submit</v-btn>\r\n        </v-form>\r\n      </v-sheet>\r\n    </v-card>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name:\"DoubleAuth\",\r\n  data() {\r\n\r\n    return {\r\n      qrCodeDataURI: '',\r\n    };\r\n  },\r\n  mounted() {\r\n    // Call API to generate OTP and get QR code image\r\n    this.generateOTP();\r\n  },\r\n  methods: {\r\n    async generateOTP() {\r\n      const response = await fetch('http://localhost:3000/otp/generate', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ user_id: 11}),\r\n      });\r\n      const data = await response.json();\r\n      this.qrCodeDataURI = data.qrCodeDataURI;\r\n      console.log(data.qrCodeDataURI)\r\n\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style>\r\n.mx-auto{\r\n  height: 400px;\r\n  text-align: center;\r\n  margin-top: 80px;\r\n  background-color: forestgreen;\r\n\r\n}\r\n.mx-auto .titre{\r\n  margin-top: 20px;\r\n  color:white;\r\n\r\n}\r\n.formnum{\r\n  margin-top:10px;\r\n}\r\n</style>"],"mappings":";gCAOMA,mBAAA,CAA8C;EAA1CC,KAAK,EAAC;AAAO,GAAC,yBAAuB;gCACzCD,mBAAA,CAA+E,cAAzE,oEAAkE;;;;;;;;;uBAP5EE,YAAA,CAoBcC,sBAAA;sBAnBZ,MAkBS,CAlBTC,YAAA,CAkBSC,iBAAA;MAjBLJ,KAAK,EAAC,SAAS;MACf,WAAS,EAAC;;wBAGZ,MAA8C,CAA9CK,UAA8C,EAC9CC,UAA+E,EAC/EP,mBAAA,CAAwC;QAAlCQ,GAAG,EAAEC,KAAA,CAAAC,aAAa;QAAEC,GAAG,EAAC;2CAC9BP,YAAA,CASUQ,kBAAA;QATDC,KAAK,EAAC,KAAK;QAACZ,KAAK,EAAC;;0BACzB,MAOS,CAPTG,YAAA,CAOSU,iBAAA;UAPAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,CAAP,QAAe;;4BACrB,MAIgB,CAJhBb,YAAA,CAIgBc,uBAAA;wBAHHC,IAAA,CAAAC,SAAS;uEAATD,IAAA,CAAAC,SAAS,GAAAC,MAAA;YACjBC,KAAK,EAAEH,IAAA,CAAAG,KAAK;YACbC,KAAK,EAAC;4DAEVnB,YAAA,CAAkGoB,gBAAA;YAA3FC,IAAI,EAAC,QAAQ;YAACC,OAAO,EAAC,mCAAmC;YAACC,KAAK,EAAL,EAAK;YAAC1B,KAAK,EAAC;;8BAAO,MAAM,C,iBAAN,QAAM,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}